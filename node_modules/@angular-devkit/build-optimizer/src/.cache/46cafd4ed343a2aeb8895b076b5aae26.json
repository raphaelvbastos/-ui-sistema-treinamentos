{"remainingRequest":"/home/raphael/ui-sistema-treinamentos/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/raphael/ui-sistema-treinamentos/node_modules/rxjs/internal/operators/publish.js","dependencies":[{"path":"/home/raphael/ui-sistema-treinamentos/node_modules/rxjs/internal/operators/publish.js","mtime":1561382057000},{"path":"/home/raphael/ui-sistema-treinamentos/node_modules/cache-loader/dist/cjs.js","mtime":1561382023000},{"path":"/home/raphael/ui-sistema-treinamentos/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1561381999000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\"use strict\";\n/*@__PURE__*/ Object.defineProperty(exports, \"__esModule\", { value: true });\nvar Subject_1 = /*@__PURE__*/ require(\"../Subject\");\nvar multicast_1 = /*@__PURE__*/ require(\"./multicast\");\n/* tslint:enable:max-line-length */\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <img src=\"./img/publish.png\" width=\"100%\">\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A ConnectableObservable that upon connection causes the source Observable to emit items to its Observers.\n * @method publish\n * @owner Observable\n */\nfunction publish(selector) {\n    return selector ?\n        multicast_1.multicast(function () { return new Subject_1.Subject(); }, selector) :\n        multicast_1.multicast(new Subject_1.Subject());\n}\nexports.publish = publish;\n",null]}