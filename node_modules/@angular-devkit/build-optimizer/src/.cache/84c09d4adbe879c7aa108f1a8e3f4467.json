{"remainingRequest":"/home/raphael/ui-sistema-treinamentos/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/raphael/ui-sistema-treinamentos/node_modules/rxjs/internal/observable/from.js","dependencies":[{"path":"/home/raphael/ui-sistema-treinamentos/node_modules/rxjs/internal/observable/from.js","mtime":1561382056000},{"path":"/home/raphael/ui-sistema-treinamentos/node_modules/cache-loader/dist/cjs.js","mtime":1561382023000},{"path":"/home/raphael/ui-sistema-treinamentos/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1561381999000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START  PURE_IMPORTS_END */\n\"use strict\";\n/*@__PURE__*/ Object.defineProperty(exports, \"__esModule\", { value: true });\nvar Observable_1 = /*@__PURE__*/ require(\"../Observable\");\nvar isPromise_1 = /*@__PURE__*/ require(\"../util/isPromise\");\nvar isArrayLike_1 = /*@__PURE__*/ require(\"../util/isArrayLike\");\nvar isObservable_1 = /*@__PURE__*/ require(\"../util/isObservable\");\nvar isIterable_1 = /*@__PURE__*/ require(\"../util/isIterable\");\nvar fromArray_1 = /*@__PURE__*/ require(\"./fromArray\");\nvar fromPromise_1 = /*@__PURE__*/ require(\"./fromPromise\");\nvar fromIterable_1 = /*@__PURE__*/ require(\"./fromIterable\");\nvar fromObservable_1 = /*@__PURE__*/ require(\"./fromObservable\");\nvar subscribeTo_1 = /*@__PURE__*/ require(\"../util/subscribeTo\");\nfunction from(input, scheduler) {\n    if (!scheduler) {\n        if (input instanceof Observable_1.Observable) {\n            return input;\n        }\n        return new Observable_1.Observable(subscribeTo_1.subscribeTo(input));\n    }\n    if (input != null) {\n        if (isObservable_1.isObservable(input)) {\n            return fromObservable_1.fromObservable(input, scheduler);\n        }\n        else if (isPromise_1.isPromise(input)) {\n            return fromPromise_1.fromPromise(input, scheduler);\n        }\n        else if (isArrayLike_1.isArrayLike(input)) {\n            return fromArray_1.fromArray(input, scheduler);\n        }\n        else if (isIterable_1.isIterable(input) || typeof input === 'string') {\n            return fromIterable_1.fromIterable(input, scheduler);\n        }\n    }\n    throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\nexports.from = from;\n",null]}